} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
sd=qplot(EXPDATA_FRAME[EXPDATA_FRAME$ps==1 & EXPDATA_FRAME$trial==1,]$samp,EXPDATA_FRAME[EXPDATA_FRAME$ps==1 & EXPDATA_FRAME$trial==1,]$X1)
sdx=Plottime(EXPDATA_FRAME,1,1)
sdx
multiplot(sdx,sd)
sdx=Plottime(EXPDATA_FRAME,1,58)
sd=qplot(EXPDATA_FRAME[EXPDATA_FRAME$ps==1 & EXPDATA_FRAME$trial==58,]$samp,EXPDATA_FRAME[EXPDATA_FRAME$ps==1 & EXPDATA_FRAME$trial==1,]$X1)
multiplot(sdx,sd)
sdx=Plottime(EXPDATA_FRAME,1,58)
sd=qplot(EXPDATA_FRAME[EXPDATA_FRAME$ps==1 & EXPDATA_FRAME$trial==58,]$samp,EXPDATA_FRAME[EXPDATA_FRAME$ps==1 & EXPDATA_FRAME$trial==58,]$X1)
multiplot(sdx,sd)
Plottime=function(dat,subj,trial)
{xboundu=1432
yboundu=822
xboundl=168
yboundl=378
ggplot(dat[dat$ps==subj & dat$trial==subj,],aes(x=X1,y=X2))+geom_rect(xmin =168 ,xmax=712,ymin=yboundl,ymax=yboundu)+geom_rect(xmin =888 ,xmax=1432,ymin=yboundl,ymax=yboundu)+geom_point(size=3,alpha=.4,color="red")+
scale_x_continuous(limits=c(xboundl,xboundu))+scale_y_continuous(limits=c(yboundl,yboundu))+
geom_path(color="blue")
}
sdx=Plottime(EXPDATA_FRAME,1,58)
sd=qplot(EXPDATA_FRAME[EXPDATA_FRAME$ps==1 & EXPDATA_FRAME$trial==58,]$samp,EXPDATA_FRAME[EXPDATA_FRAME$ps==1 & EXPDATA_FRAME$trial==58,]$X1)
multiplot(sdx,sd)
sdx=Plottime(EXPDATA_FRAME,1,58)
sdx
sdx=Plottime(EXPDATA_FRAME,1,1)
sdx
sdx=Plottime(EXPDATA_FRAME,1,1)
sdx
sdx=Plottime(EXPDATA_FRAME,1,58)
sd=qplot(EXPDATA_FRAME[EXPDATA_FRAME$ps==1 & EXPDATA_FRAME$trial==58,]$samp,EXPDATA_FRAME[EXPDATA_FRAME$ps==1 & EXPDATA_FRAME$trial==58,]$X1)
multiplot(sdx,sd)
Plottime=function(dat,subj,trial)
{xboundu=1432
yboundu=822
xboundl=168
yboundl=378
ggplot(dat[dat$ps==subj & dat$trial==trial,],aes(x=X1,y=X2))+geom_rect(xmin =168 ,xmax=712,ymin=yboundl,ymax=yboundu)+geom_rect(xmin =888 ,xmax=1432,ymin=yboundl,ymax=yboundu)+geom_point(size=3,alpha=.4,color="red")+
scale_x_continuous(limits=c(xboundl,xboundu))+scale_y_continuous(limits=c(yboundl,yboundu))+
geom_path(color="blue")
}
sdx=Plottime(EXPDATA_FRAME,1,58)
sd=qplot(EXPDATA_FRAME[EXPDATA_FRAME$ps==1 & EXPDATA_FRAME$trial==58,]$samp,EXPDATA_FRAME[EXPDATA_FRAME$ps==1 & EXPDATA_FRAME$trial==58,]$X1)
multiplot(sdx,sd)
EXPDATA_FRAME$isinL=ifelse(EXPDATA_FRAME$X1<712 & EXPDATA_FRAME$X1>168,1,0)
table(EXPDATA_FRAME$isinL)
Plottime=function(dat,subj,trial)
{xboundu=1432
yboundu=822
xboundl=168
yboundl=378
ggplot(dat[dat$ps==subj & dat$trial==trial,],aes(x=X1,y=X2))+geom_rect(xmin =168 ,xmax=712,ymin=yboundl,ymax=yboundu)+geom_rect(xmin =888 ,xmax=1432,ymin=yboundl,ymax=yboundu)+geom_point(size=3,alpha=.4,aes(color=isinL))+
scale_x_continuous(limits=c(xboundl,xboundu))+scale_y_continuous(limits=c(yboundl,yboundu))+
geom_path(color="blue")
}
sdx=Plottime(EXPDATA_FRAME,1,58)
sdx
Plottime=function(dat,subj,trial)
{xboundu=1432
yboundu=822
xboundl=168
yboundl=378
ggplot(dat[dat$ps==subj & dat$trial==trial,],aes(x=X1,y=X2))+geom_rect(xmin =168 ,xmax=712,ymin=yboundl,ymax=yboundu)+geom_rect(xmin =888 ,xmax=1432,ymin=yboundl,ymax=yboundu)+geom_point(size=3,alpha=.4,aes(color=factor(isinL)))+
scale_x_continuous(limits=c(xboundl,xboundu))+scale_y_continuous(limits=c(yboundl,yboundu))+
geom_path(color="blue")
}
sdx=Plottime(EXPDATA_FRAME,1,58)
sdx
EXPDATA_FRAME$isinL=factor(ifelse(EXPDATA_FRAME$X1<712 & EXPDATA_FRAME$X1>168,1,0))
Plottime=function(dat,subj,trial)
{xboundu=1432
yboundu=822
xboundl=168
yboundl=378
ggplot(dat[dat$ps==subj & dat$trial==trial,],aes(x=X1,y=X2))+geom_rect(xmin =168 ,xmax=712,ymin=yboundl,ymax=yboundu)+geom_rect(xmin =888 ,xmax=1432,ymin=yboundl,ymax=yboundu)+geom_point(size=3,alpha=.4,aes(color=isinL))+
scale_x_continuous(limits=c(xboundl,xboundu))+scale_y_continuous(limits=c(yboundl,yboundu))+
geom_path(color="blue")
}
sdx=Plottime(EXPDATA_FRAME,1,58)
sdx
EXPDATA_FRAME$isinL=factor(ifelse(EXPDATA_FRAME$X1<712 & EXPDATA_FRAME$X1>168,1,2))
Plottime=function(dat,subj,trial)
{xboundu=1432
yboundu=822
xboundl=168
yboundl=378
ggplot(dat[dat$ps==subj & dat$trial==trial,],aes(x=X1,y=X2))+geom_rect(xmin =168 ,xmax=712,ymin=yboundl,ymax=yboundu)+geom_rect(xmin =888 ,xmax=1432,ymin=yboundl,ymax=yboundu)+geom_point(size=3,alpha=.4,aes(color=isinL))+
scale_x_continuous(limits=c(xboundl,xboundu))+scale_y_continuous(limits=c(yboundl,yboundu))+
geom_path(color="blue")
}
sdx=Plottime(EXPDATA_FRAME,1,58)
sdx
table(EXPDATA_FRAME$isinL)
sdx=Plottime(EXPDATA_FRAME,1,1)
sdx
EXPDATA_FRAME$isinL=factor(ifelse(EXPDATA_FRAME$X1<712 & EXPDATA_FRAME$X1>168 & EXPDATA_FRAME$X2<822 & EXPDATA_FRAME$X2>378 ,1,2))
EXPDATA_FRAME$isinR=factor(ifelse(EXPDATA_FRAME$X1<1432 & EXPDATA_FRAME$X1>888 & EXPDATA_FRAME$X2<822 & EXPDATA_FRAME$X2>378 ,1,2))
EXPDATA_FRAME$isinL=factor(ifelse(EXPDATA_FRAME$X1<712 & EXPDATA_FRAME$X1>168 & EXPDATA_FRAME$X2<822 & EXPDATA_FRAME$X2>378 ,1,""))
EXPDATA_FRAME$isinR=factor(ifelse(EXPDATA_FRAME$X1<1432 & EXPDATA_FRAME$X1>888 & EXPDATA_FRAME$X2<822 & EXPDATA_FRAME$X2>378 ,1,""))
table(EXPDATA_FRAME$isinL)
EXPDATA_FRAME$X1[1]
EXPDATA_FRAME$X1[2]
EXPDATA_FRAME$X1[780]
install.packages("tcltk")
library(tcltk)
pb <- tkProgressBar(title = "progress bar", min = 0,
max = total, width = 300)
for (i in 1:nrow(EXPDATA_FRAME)){
print(i)
if (EXPDATA_FRAME$X1[i]<712 & EXPDATA_FRAME$X1[i]>168 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378){
EXPDATA$AOI[i]="Left"
} else if (EXPDATA_FRAME$X1[i]<1432 & EXPDATA_FRAME$X1[i]>888 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378)
EXPDATA$AOI[i]="Right"
} else {
EXPDATA$AOI[i]=""
}
for (i in 1:nrow(EXPDATA_FRAME)){
print(i)
if (EXPDATA_FRAME$X1[i]<712 & EXPDATA_FRAME$X1[i]>168 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378){
EXPDATA$AOI[i]="Left"
} else if (EXPDATA_FRAME$X1[i]<1432 & EXPDATA_FRAME$X1[i]>888 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378)
EXPDATA$AOI[i]="Right"
} else {
EXPDATA$AOI[i]=""
}
}
for (i in 1:nrow(EXPDATA_FRAME)){
print(i)
if (EXPDATA_FRAME$X1[i]<712 & EXPDATA_FRAME$X1[i]>168 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378){
EXPDATA$AOI[i]="Left"
}
else if (EXPDATA_FRAME$X1[i]<1432 & EXPDATA_FRAME$X1[i]>888 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378){
EXPDATA$AOI[i]="Right"
} else {
EXPDATA$AOI[i]=""
}
}
for (i in 1:nrow(EXPDATA_FRAME)){
print(i)
if (EXPDATA_FRAME$X1[i]<712 & EXPDATA_FRAME$X1[i]>168 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378){
EXPDATA$AOI[i]="Left"}
else if (EXPDATA_FRAME$X1[i]<1432 & EXPDATA_FRAME$X1[i]>888 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378){
EXPDATA$AOI[i]="Right"}
else {
EXPDATA$AOI[i]=""}
}
EXPDATA$AOI=rep(0,nrow(EXPDATA_FRAME))
EXPDATA_FRAME$AOI=rep(0,nrow(EXPDATA_FRAME))
for (i in 1:nrow(EXPDATA_FRAME)){
print(i)
if (EXPDATA_FRAME$X1[i]<712 & EXPDATA_FRAME$X1[i]>168 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378){
EXPDATA$AOI[i]="Left"}
else if (EXPDATA_FRAME$X1[i]<1432 & EXPDATA_FRAME$X1[i]>888 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378){
EXPDATA$AOI[i]="Right"}
else {
EXPDATA$AOI[i]=""}
}
for (i in 1:nrow(EXPDATA_FRAME)){
print(i)
if (EXPDATA_FRAME$X1[i]<712 & EXPDATA_FRAME$X1[i]>168 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378){
EXPDATA_FRAME$AOI[i]="Left"}
else if (EXPDATA_FRAME$X1[i]<1432 & EXPDATA_FRAME$X1[i]>888 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378){
EXPDATA_FRAME$AOI[i]="Right"}
else {
EXPDATA_FRAME$AOI[i]=""}
}
x <- 1
if (x ==1){
print('same')
} else if (x > 1){
print('bigger')
} else {
print('smaller')
}
x=0
if (x ==1){
print('same')
} else if (x > 1){
print('bigger')
} else {
print('smaller')
}
for (i in 1:nrow(EXPDATA_FRAME)){
if (EXPDATA_FRAME$X1[i]<712 & EXPDATA_FRAME$X1[i]>168 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378){
EXPDATA_FRAME$AOI[i]="Left"}
else if (EXPDATA_FRAME$X1[i]<1432 & EXPDATA_FRAME$X1[i]>888 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378){
EXPDATA_FRAME$AOI[i]="Right"}
else {
EXPDATA_FRAME$AOI[i]=""}
}
EXPDATA_FRAME$X1[1]<712 & EXPDATA_FRAME$X1[1]>168 & EXPDATA_FRAME$X2[1]<822 & EXPDATA_FRAME$X2[1]>378
for (i in 1:nrow(EXPDATA_FRAME)){
if (EXPDATA_FRAME$X1[i]<712 & EXPDATA_FRAME$X1[i]>168 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378){
EXPDATA_FRAME$AOI[i]="Left"}
else if (EXPDATA_FRAME$X1[i]<1432 & EXPDATA_FRAME$X1[i]>888 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378){
EXPDATA_FRAME$AOI[i]="Right"}
else if (EXPDATA_FRAME$AOI[i]="NA"){
EXPDATA_FRAME$AOI[i]=""}
}
for (i in 1:nrow(EXPDATA_FRAME)){
if (EXPDATA_FRAME$X1[i]<712 & EXPDATA_FRAME$X1[i]>168 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378){
EXPDATA_FRAME$AOI[i]="Left"}
else if (EXPDATA_FRAME$X1[i]<1432 & EXPDATA_FRAME$X1[i]>888 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378){
EXPDATA_FRAME$AOI[i]="Right"}
else if (EXPDATA_FRAME$AOI[i]="NA"){
EXPDATA_FRAME$AOI[i]=""}
}
for (i in 1:nrow(EXPDATA_FRAME)){
if (EXPDATA_FRAME$X1[i]<712 & EXPDATA_FRAME$X1[i]>168 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378){
EXPDATA_FRAME$AOI[i]="Left"}
else if (EXPDATA_FRAME$X1[i]<1432 & EXPDATA_FRAME$X1[i]>888 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378){
EXPDATA_FRAME$AOI[i]="Right"}
else if (EXPDATA_FRAME$AOI[i]="NA"){
EXPDATA_FRAME$AOI[i]=""
}
}
for (i in 1:nrow(EXPDATA_FRAME)){
if (EXPDATA_FRAME$X1[i]<712 & EXPDATA_FRAME$X1[i]>168 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378){
EXPDATA_FRAME$AOI[i]="Left"}
else if (EXPDATA_FRAME$X1[i]<1432 & EXPDATA_FRAME$X1[i]>888 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378){
EXPDATA_FRAME$AOI[i]="Right"}
else if (EXPDATA_FRAME$X1[i]="NA"){
EXPDATA_FRAME$AOI[i]=""
}
}
for (i in 1:nrow(EXPDATA_FRAME)){
if (EXPDATA_FRAME$X1[i]<712 & EXPDATA_FRAME$X1[i]>168 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378){
EXPDATA_FRAME$AOI[i]="Left"}
else if (EXPDATA_FRAME$X1[i]<1432 & EXPDATA_FRAME$X1[i]>888 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378){
EXPDATA_FRAME$AOI[i]="Right"}
else {EXPDATA_FRAME$AOI[i]=""
}
}
for (i in 1:nrow(EXPDATA_FRAME)){
if (EXPDATA_FRAME$X1[i]<712 & EXPDATA_FRAME$X1[i]>168 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378 ==1){
EXPDATA_FRAME$AOI[i]="Left"}
else if (EXPDATA_FRAME$X1[i]<1432 & EXPDATA_FRAME$X1[i]>888 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378 ==1){
EXPDATA_FRAME$AOI[i]="Right"}
else {EXPDATA_FRAME$AOI[i]=""
}
}
for (i in 1:nrow(EXPDATA_FRAME)){
if (EXPDATA_FRAME$X1[i]<712 & EXPDATA_FRAME$X1[i]>168 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378 ==1){
EXPDATA_FRAME$AOI[i]="Left"}
else if (EXPDATA_FRAME$X1[i]<1432 & EXPDATA_FRAME$X1[i]>888 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378 ==1){
EXPDATA_FRAME$AOI[i]="Right"}
else {EXPDATA_FRAME$AOI[i]=""
}
}
for (i in 1:nrow(EXPDATA_FRAME)){
if (EXPDATA_FRAME$X1[i]<712 & EXPDATA_FRAME$X1[i]>168 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378 ==1){
EXPDATA_FRAME$AOI[i]="Left"}
else if (EXPDATA_FRAME$X1[i]<1432 & EXPDATA_FRAME$X1[i]>888 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378 ==1){
EXPDATA_FRAME$AOI[i]="Right"}
else {
EXPDATA_FRAME$AOI[i]=""}
}
for (i in 1:nrow(EXPDATA_FRAME)){
if (EXPDATA_FRAME$X1[i]<712 & EXPDATA_FRAME$X1[i]>168 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378 ==1){
EXPDATA_FRAME$AOI[i]="Left"}
else if (EXPDATA_FRAME$X1[i]<1432 & EXPDATA_FRAME$X1[i]>888 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378 ==1){
EXPDATA_FRAME$AOI[i]="Right"}
else {
EXPDATA_FRAME$AOI[i]="N"}
}
for (i in 1:nrow(EXPDATA_FRAME)){
if (EXPDATA_FRAME$X1[i]<712 & EXPDATA_FRAME$X1[i]>168 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378 ==1){
EXPDATA_FRAME$AOI[i]="Left"}
else if (EXPDATA_FRAME$X1[i]<1432 & EXPDATA_FRAME$X1[i]>888 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378 ==1){
EXPDATA_FRAME$AOI[i]="Right"}
else {EXPDATA_FRAME$AOI[i]="N"}
}
EXPDATA_FRAME$X1[1]<1432 & EXPDATA_FRAME$X1[1]>888 & EXPDATA_FRAME$X2[1]<822 & EXPDATA_FRAME$X2[1]>378 ==1
EXPDATA_FRAME$X1[1]<1432 & EXPDATA_FRAME$X1[1]>888 & EXPDATA_FRAME$X2[1]<822 & EXPDATA_FRAME$X2[1]>378
EXPDATA_FRAME$X1[1344]<1432 & EXPDATA_FRAME$X1[1344]>888 & EXPDATA_FRAME$X2[1344]<822 & EXPDATA_FRAME$X2[1344]>378
for (i in 1:nrow(EXPDATA_FRAME)){
if (EXPDATA_FRAME$X1[i]<712 & EXPDATA_FRAME$X1[i]>168 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378){
EXPDATA_FRAME$AOI[i]="Left"}
else if (EXPDATA_FRAME$X1[i]<1432 & EXPDATA_FRAME$X1[i]>888 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378){
EXPDATA_FRAME$AOI[i]="Right"}
else {EXPDATA_FRAME$AOI[i]="N"}
}
for (i in 1:nrow(EXPDATA_FRAME)){
if (EXPDATA_FRAME$X1[i]<712 & EXPDATA_FRAME$X1[i]>168 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378){
EXPDATA_FRAME$AOI[i]="Left"}
else if (EXPDATA_FRAME$X1[i]<1432 & EXPDATA_FRAME$X1[i]>888 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378){
EXPDATA_FRAME$AOI[i]="Right"}
else if (is.na(EXPDATA_FRAME$X1[i])){
EXPDATA_FRAME$AOI[i]=="N"}
}
is.na(EXPDATA_FRAME$X1[1]
)
for (i in 1:nrow(EXPDATA_FRAME)){
if (is.na(EXPDATA_FRAME$X1[i])){
EXPDATA_FRAME$AOI[i]=="N"}
else if (EXPDATA_FRAME$X1[i]<1432 & EXPDATA_FRAME$X1[i]>888 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378){
EXPDATA_FRAME$AOI[i]="Right"}
else if (EXPDATA_FRAME$X1[i]<712 & EXPDATA_FRAME$X1[i]>168 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378){
EXPDATA_FRAME$AOI[i]="Left"}
}
EXPDATA_FRAME$AOI=rep(0,nrow(EXPDATA_FRAME))
for (i in 1:nrow(EXPDATA_FRAME)){
print(i)
if (is.na(EXPDATA_FRAME$X1[i])){
EXPDATA_FRAME$AOI[i]=="N"}
else if (EXPDATA_FRAME$X1[i]<1432 & EXPDATA_FRAME$X1[i]>888 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378){
EXPDATA_FRAME$AOI[i]="Right"}
else if (EXPDATA_FRAME$X1[i]<712 & EXPDATA_FRAME$X1[i]>168 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378){
EXPDATA_FRAME$AOI[i]="Left"}
}
head(EXPDATA_FRAME)
table(EXPDATA_FRAME$AOI)
Plottime=function(dat,subj,trial)
{xboundu=1432
yboundu=822
xboundl=168
yboundl=378
ggplot(dat[dat$ps==subj & dat$trial==trial,],aes(x=X1,y=X2))+geom_rect(xmin =168 ,xmax=712,ymin=yboundl,ymax=yboundu)+geom_rect(xmin =888 ,xmax=1432,ymin=yboundl,ymax=yboundu)+geom_point(size=3,alpha=.4,aes(color=AOI))+
scale_x_continuous(limits=c(xboundl,xboundu))+scale_y_continuous(limits=c(yboundl,yboundu))+
geom_path(color="blue")
}
sdx=Plottime(EXPDATA_FRAME,1,1)
sdx
install.packages(c("metafor","ggplot2","metasem","compute.es","MBESS"))
install.packages(c("metafor", "ggplot2", "metasem", "compute.es", "MBESS"))
install.packages("metaSEM")
sqrt(2*(1-0.5))
knitr::opts_chunk$set(echo = TRUE)
Group1=rnorm(20,10,4)
Group2=rnorm(20,10,7)
set.seed(10)
Group1=rnorm(20,10,4)
Group2=rnorm(20,10,7)
test=t.test(Group1,Group2,paired=TRUE)
test
test$parameter
test$statistic
test$p.value
result1=ptoDr(test$p.value,20,0.5)
ptoDr=function(p,N,r)
{T=qt(p/2,N-1)
D=T/sqrt(N)
Da=D*sqrt(2*(1-r))
Da2=sqrt(Da^2)
SE=sqrt(1/N+D^2/(2*N))*sqrt(2*(1-r))
CIp=Da2+(SE*1.96)
CIn=Da2-(SE*1.96)
DSE=c(Da2,SE,CIn,CIp)}
# Define a function for converting from t value and N to Cohen's dz and 95% CI's
TtoDr=function(t,N,r)
{D=t/sqrt(N)
Dp=sqrt(D^2)
Dp2=Dp*sqrt(2*(1-r))
SE=sqrt((1/N)+(Dp^2)/(2*N))*sqrt(2*(1-r))
CIp=Dp2+(SEr*1.96)
CIn=Dp2-(SEr*1.96)
DSE=c(Dp2,SEr,CIn,CIp)}
# Define a function for converting from original group data to Cohen's dz and 95% CI's
GtoD=function(G1,G2)
{Mdiff=mean(G1)-mean(G2)
SDdiff=sd(G1-G2)
D=Mdiff/SDdiff
SE=sqrt((1/N)+(D^2)/(2*N))*sqrt(2*(1-r))
CIp=D+(SE*1.96)
CIn=D-(SE*1.96)
DSE=c(D,SE,CIn,CIp)}
result1=ptoDr(test$p.value,20,0.5)
result2=TtoDr(test$statistic,20,0.5)
ptoDr=function(p,N,r)
{T=qt(p/2,N-1)
D=T/sqrt(N)
Da=D*sqrt(2*(1-r))
Da2=sqrt(Da^2)
SE=sqrt(1/N+D^2/(2*N))*sqrt(2*(1-r))
CIp=Da2+(SE*1.96)
CIn=Da2-(SE*1.96)
DSE=c(Da2,SE,CIn,CIp)}
# Define a function for converting from t value and N to Cohen's dz and 95% CI's
TtoDr=function(t,N,r)
{D=t/sqrt(N)
Dp=sqrt(D^2)
Dp2=Dp*sqrt(2*(1-r))
SE=sqrt((1/N)+(Dp^2)/(2*N))*sqrt(2*(1-r))
CIp=Dp2+(SE*1.96)
CIn=Dp2-(SE*1.96)
DSE=c(Dp2,SE,CIn,CIp)}
# Define a function for converting from original group data to Cohen's dz and 95% CI's
GtoD=function(G1,G2)
{Mdiff=mean(G1)-mean(G2)
SDdiff=sd(G1-G2)
D=Mdiff/SDdiff
SE=sqrt((1/N)+(D^2)/(2*N))*sqrt(2*(1-r))
CIp=D+(SE*1.96)
CIn=D-(SE*1.96)
DSE=c(D,SE,CIn,CIp)}
result1=ptoDr(test$p.value,20,0.5)
result2=TtoDr(test$statistic,20,0.5)
result1
result2
result3=GtoD(Group1,Group2)
GtoD=function(G1,G2)
{Mdiff=mean(G1)-mean(G2)
N=length(G1)
SDdiff=sd(G1-G2)
D=Mdiff/SDdiff
SE=sqrt((1/N)+(D^2)/(2*N))*sqrt(2*(1-r))
CIp=D+(SE*1.96)
CIn=D-(SE*1.96)
DSE=c(D,SE,CIn,CIp)}
result1=ptoDr(test$p.value,20,0.5)
result2=TtoDr(as.numeric(test$statistic),20,0.5)
result3=GtoD(Group1,Group2)
GtoD=function(G1,G2)
{Mdiff=mean(G1)-mean(G2)
N=length(G1)
SDdiff=sd(G1-G2)
D=Mdiff/SDdiff
SE=sqrt((1/N)+(D^2)/(2*N))
CIp=D+(SE*1.96)
CIn=D-(SE*1.96)
DSE=c(D,SE,CIn,CIp)}
result1=ptoDr(test$p.value,20,0.5)
result2=TtoDr(as.numeric(test$statistic),20,0.5)
result3=GtoD(Group1,Group2)
result3
result2
result1
# Import metafor library
library(metafor)
# Create dummy data values for two conditions (repeated measures)
set.seed(10)
Condition1=rnorm(20,10,4)
Condition2=rnorm(20,10,7)
# Compute t test to get t and p value
test=t.test(Condition1,Condition2,paired=TRUE)
# Method 1: Define a function for converting from p value and N to Cohen's dz and 95% CI's
ptoDr=function(p,N,r){
T=qt(p/2,N-1)
D=T/sqrt(N)
Da=D*sqrt(2*(1-r))
Da2=sqrt(Da^2)
SE=sqrt(1/N+D^2/(2*N))*sqrt(2*(1-r))
CIp=Da2+(SE*1.96)
CIn=Da2-(SE*1.96)
DSE=c(Da2,SE,CIn,CIp)}
# Method 2: Define a function for converting from t value and N to Cohen's dz and 95% CI's
TtoDr=function(t,N,r)
{D=t/sqrt(N)
Dp=sqrt(D^2)
Dp2=Dp*sqrt(2*(1-r))
SE=sqrt((1/N)+(Dp^2)/(2*N))*sqrt(2*(1-r))
CIp=Dp2+(SE*1.96)
CIn=Dp2-(SE*1.96)
DSE=c(Dp2,SE,CIn,CIp)}
# Method 3: Define a function for converting from original group data to Cohen's dz and 95% CI's
CtoD=function(G1,G2){
# Mean difference
Mdiff=mean(G1)-mean(G2)
N=length(G1)
# Standard deviation of the difference scores.
SDdiff=sd(G1-G2)
D=Mdiff/SDdiff
SE=sqrt((1/N)+(D^2)/(2*N))
CIp=D+(SE*1.96)
CIn=D-(SE*1.96)
DSE=c(D,SE,CIn,CIp)}
result1=ptoDr(test$p.value,20,0.5)
result2=TtoDr(as.numeric(test$statistic),20,0.5)
result3=CtoD(Condition1,Condition2)
result1
mean(Condition1)
mean(Condition2)
length(Condition1)
# Import metafor library
library(metafor)
# Create dummy data values for two conditions (repeated measures)
set.seed(10)
Condition1=rnorm(20,10,4)
Condition2=rnorm(20,5,7)
# Compute t test to get t and p value
test=t.test(Condition1,Condition2,paired=TRUE)
test
set.seed(10)
Condition1=rnorm(20,7,4)
Condition2=rnorm(20,5,7)
# Compute t test to get t and p value
test=t.test(Condition1,Condition2,paired=TRUE)
test
set.seed(10)
Condition1=rnorm(20,7,5)
Condition2=rnorm(20,5,7)
# Compute t test to get t and p value
test=t.test(Condition1,Condition2,paired=TRUE)
test
set.seed(10)
Condition1=rnorm(20,6,5)
Condition2=rnorm(20,5,7)
# Compute t test to get t and p value
test=t.test(Condition1,Condition2,paired=TRUE)
test
