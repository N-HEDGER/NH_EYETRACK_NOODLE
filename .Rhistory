EXPDATA_FRAME$SOCIAL=as.numeric(EXPDATA_FRAME$SOCIAL)
table(EXPDATA_FRAME$SOCIAL)
EXPDATA_FRAME$SOCIAL=ifelse(EXPDATA_FRAME$X3==EXPDATA_FRAME$AOI,"1",0)
EXPDATA_FRAME$NONSOCIAL=ifelse(EXPDATA_FRAME$X3!=EXPDATA_FRAME$AOI & EXPDATA_FRAME$AOI!=0 ,"1",0)
head(EXPDATA_FRAME)
data <- make_eyetrackingr_data(EXPDATA_FRAME,
participant_column = "ps",
trial_column = "trial",
time_column = "samp",
aoi_columns = c('SOCIAL','NONSOCIAL'),
treat_non_aoi_looks_as_missing = TRUE,trackloss_column="track"
)
table(EXPDATA_FRAME$SOCIAL)
as.logical(1)
EXPDATA_FRAME$track=as.logical(rep(0,nrow(EXPDATA_FRAME)))
EXPDATA_FRAME$SOCIAL=as.logical(ifelse(EXPDATA_FRAME$X3==EXPDATA_FRAME$AOI,"1",0))
EXPDATA_FRAME$NONSOCIAL=as.logical(ifelse(EXPDATA_FRAME$X3!=EXPDATA_FRAME$AOI & EXPDATA_FRAME$AOI!=0 ,"1",0))
EXPDATA_FRAME$track=as.logical(rep(0,nrow(EXPDATA_FRAME)))
head(EXPDATA_FRAME)
data <- make_eyetrackingr_data(EXPDATA_FRAME,
participant_column = "ps",
trial_column = "trial",
time_column = "samp",
aoi_columns = c('SOCIAL','NONSOCIAL'),
treat_non_aoi_looks_as_missing = TRUE,trackloss_column="track"
)
data
head(data)
response_time <- make_time_sequence_data(data, time_bin_size = 1,
predictor_columns = c("Scramb"),
aois = c("SOCIAL","NONSOCIAL"),
)
plot(response_time, predictor_column = "Scramb")
response_time <- make_time_sequence_data(data, time_bin_size = 20,
predictor_columns = c("Scramb"),
aois = c("SOCIAL","NONSOCIAL"))
plot(response_time, predictor_column = "Scramb")
head(response_time)
table(samplesINAOI)
table(response_time$samplesINAOI)
table(response_time$SamplesInAOI)
response_time <- make_time_sequence_data(data, time_bin_size = 20,aois = c("SOCIAL","NONSOCIAL"))
plot(response_time)
response_time <- make_time_sequence_data(data, time_bin_size = 100,aois = c("SOCIAL","NONSOCIAL"))
plot(response_time)
table(response_time$SamplesInAOI)
table(data$SOCIAL)
head(data)
table(EXPDATA_FRAME$SOCIAL)
EXPDATA_FRAME$SOCIAL=as.logical(ifelse(EXPDATA_FRAME$X3==EXPDATA_FRAME$AOI,"1",0))
table(EXPDATA_FRAME$SOCIAL)
EXPDATA_FRAME$SOCIAL=ifelse(EXPDATA_FRAME$X3==EXPDATA_FRAME$AOI,"1",0)
table(EXPDATA_FRAME$SOCIAL)
EXPDATA_FRAME$SOCIAL=as.logical(ifelse(EXPDATA_FRAME$X3==EXPDATA_FRAME$AOI,"1",0))
table(EXPDATA_FRAME$SOCIAL)
EXPDATA_FRAME$SOCIAL=as.logical(ifelse(EXPDATA_FRAME$X3==EXPDATA_FRAME$AOI,1,0))
EXPDATA_FRAME$NONSOCIAL=as.logical(ifelse(EXPDATA_FRAME$X3!=EXPDATA_FRAME$AOI & EXPDATA_FRAME$AOI!=0 ,1,0))
EXPDATA_FRAME$track=as.logical(rep(0,nrow(EXPDATA_FRAME)))
head(EXPDATA_FRAME)
data <- make_eyetrackingr_data(EXPDATA_FRAME,
participant_column = "ps",
trial_column = "trial",
time_column = "samp",
aoi_columns = c('SOCIAL','NONSOCIAL'),
treat_non_aoi_looks_as_missing = TRUE,trackloss_column="track"
)
response_time <- make_time_sequence_data(data, time_bin_size = 100,aois = c("SOCIAL","NONSOCIAL"))
table(response_time$SamplesInAOI)
plot(response_time)
response_time <- make_time_sequence_data(data, time_bin_size = 100,aois = c("SOCIAL","NONSOCIAL"),predictor_columns = c("Scramb"))
plot(response_time)
table(data$Scramb)
response_time <- make_time_sequence_data(data, time_bin_size = 100,aois = c("SOCIAL","NONSOCIAL"),predictor_columns = as.factor(("Scramb")))
plot(response_time)
head(data)
response_time <- make_time_sequence_data(data, time_bin_size = 100,aois = c("SOCIAL","NONSOCIAL"),predictor_columns = c("Scramb"))
plot(response_time)
head(response_time)
plot(response_time, predictor_column = "Scramb")
data <- make_eyetrackingr_data(EXPDATA_FRAME,
participant_column = "ps",
trial_column = "trial",
time_column = "samp",
aoi_columns = c('SOCIAL','NONSOCIAL'),
treat_non_aoi_looks_as_missing = TRUE,trackloss_column="track"
)
data$Scramb=factor(data$Scramb,levels=c(1,2),labels=c("Unscrambled","Scrambled"))
response_time <- make_time_sequence_data(data, time_bin_size = 100,aois = c("SOCIAL","NONSOCIAL"),predictor_columns = c("Scramb"))
plot(response_time, predictor_column = "Scramb")
response_time <- make_time_sequence_data(data, time_bin_size = 200,aois = c("SOCIAL","NONSOCIAL"),predictor_columns = c("Scramb"))
plot(response_time, predictor_column = "Scramb")
response_time <- make_time_sequence_data(data, time_bin_size = 500,aois = c("SOCIAL","NONSOCIAL"),predictor_columns = c("Scramb"))
plot(response_time, predictor_column = "Scramb")
response_time <- make_time_sequence_data(data, time_bin_size = 1000,aois = c("SOCIAL","NONSOCIAL"),predictor_columns = c("Scramb"))
plot(response_time, predictor_column = "Scramb")
response_time <- make_time_sequence_data(data, time_bin_size = 5000,aois = c("SOCIAL","NONSOCIAL"),predictor_columns = c("Scramb"))
plot(response_time, predictor_column = "Scramb")
response_time <- make_time_sequence_data(data, time_bin_size = 100,aois = c("SOCIAL","NONSOCIAL"),predictor_columns = c("Scramb"))
plot(response_time, predictor_column = "Scramb")
response_time <- make_time_sequence_data(data, time_bin_size = 100,aois = c("SOCIAL"),predictor_columns = c("Scramb"))
plot(response_time, predictor_column = "Scramb")
nrow(response_time)
data$Scramb=factor(data$Scramb,levels=c(1,2),labels=c("Unscrambled","Scrambled"))
response_time <- make_time_sequence_data(data, time_bin_size = 200,aois = c("SOCIAL"),predictor_columns = c("Scramb"))
plot(response_time, predictor_column = "Scramb")
response_time <- make_time_sequence_data(data, time_bin_size = 200,aois = c("SOCIAL"),predictor_columns = c("Scramb"))
plot(response_time, predictor_column = "Scramb")
data <- make_eyetrackingr_data(EXPDATA_FRAME,
participant_column = "ps",
trial_column = "trial",
time_column = "samp",
aoi_columns = c('SOCIAL','NONSOCIAL'),
treat_non_aoi_looks_as_missing = TRUE,trackloss_column="track"
)
data$Scramb=factor(data$Scramb,levels=c(1,2),labels=c("Unscrambled","Scrambled"))
response_time <- make_time_sequence_data(data, time_bin_size = 200,aois = c("SOCIAL"),predictor_columns = c("Scramb"))
plot(response_time, predictor_column = "Scramb")
response_time <- make_time_sequence_data(data, time_bin_size = 200,aois = c("SOCIAL","NONSOCIAL"),predictor_columns = c("Scramb"))
plot(response_time, predictor_column = "Scramb")
response_time <- make_time_sequence_data(data, time_bin_size = 500,aois = c("SOCIAL","NONSOCIAL"),predictor_columns = c("Scramb"))
plot(response_time, predictor_column = "Scramb")
response_time <- make_time_sequence_data(data, time_bin_size = 200,aois = c("SOCIAL","NONSOCIAL"),predictor_columns = c("Scramb"))
plot(response_time, predictor_column = "Scramb")
min(data$samp)
tb_analysis <- analyze_time_bins(data = response_time, predictor_column = "Scramb", test = "t.test", alpha = .05)
response_time <- make_time_sequence_data(data, time_bin_size = 200,aois = c("SOCIAL"),predictor_columns = c("Scramb"))
plot(response_time, predictor_column = "Scramb")
tb_analysis <- analyze_time_bins(data = response_time, predictor_column = "Scramb", test = "t.test", alpha = .05)
response_time <- make_time_sequence_data(data, time_bin_size = 200,aois = c("SOCIAL"),predictor_columns = c("Scramb"),summarize_by = "ps")
plot(response_time, predictor_column = "Scramb")
tb_analysis <- analyze_time_bins(data = response_time, predictor_column = "Scramb", test = "t.test", alpha = .05)
plot(tb_analysis, type = "estimate") + theme_light()
tb_analysis <- analyze_time_bins(data = response_time, predictor_column = "Scramb", test = "t.test", alpha = .05,p_adjust_method = "bonferroni")
plot(tb_analysis, type = "estimate") + theme_light()
response_time <- make_time_sequence_data(data, time_bin_size = 200,aois = c("SOCIAL","NONSOCIAL"),predictor_columns = c("Scramb"),summarize_by = "ps")
plot(response_time, predictor_column = "Scramb")
tb_analysis <- analyze_time_bins(data = response_time, predictor_column = "Scramb", test = "t.test", alpha = .05,p_adjust_method = "bonferroni")
plot(tb_analysis, type = "estimate") + theme_light()
response_time <- make_time_sequence_data(data, time_bin_size = 200,aois = c("NONSOCIAL"),predictor_columns = c("Scramb"),summarize_by = "ps")
plot(response_time, predictor_column = "Scramb")
tb_analysis <- analyze_time_bins(data = response_time, predictor_column = "Scramb", test = "t.test", alpha = .05,p_adjust_method = "bonferroni")
plot(tb_analysis, type = "estimate") + theme_light()
table(DATA$SUB)
DATA2=DATA
DATA2=DATA2[DATA2$CURRENT_SAC_START_TIME<5000,]
DATA2=DATA2[DATA2$CURRENT_SAC_START_TIME>70,]
table(DATA2$trial_1,DATA2$SUB)
sum(DATA2$trial_1,DATA2$SUB)<1
sum(DATA2$trial_1,DATA2$SUB<1)
sum(table(DATA2$trial_1,DATA2$SUB)<1)
DATA2=DATA
DATA2=DATA2[DATA2$CURRENT_SAC_START_TIME<5000,]
DATA2=DATA2[DATA2$CURRENT_SAC_START_TIME>70,]
DATA2$SUB=factor(DATA2$SUB)
# 500 samples per trial (100 hz)
NEWFRAMELEN=(80*77)*500
# Add back in the time dimension (500 samples per trial)
EXPDATA_FRAME=data.frame(matrix(ncol=3,nrow=NEWFRAMELEN))
EXPDATA_FRAME$samp=rep(seq(0,5000,length=500))
EXPDATA_FRAME$ps=rep(as.numeric(levels(DATA2$SUB)),each=nrow(EXPDATA_FRAME)/77)
EXPDATA_FRAME$trial=rep(as.numeric(levels(DATA2$TRIAL)),each=nrow(EXPDATA_FRAME)/(77*80))
EXPDATA_FRAME$Scramb=ifelse(EXPDATA_FRAME$trial>40,2,1)
levels(DATA2$SUB)
sum(table(DATA2$trial_1,DATA2$SUB)<1)
table(DATA2$trial_1,DATA2$SUB)
plot(tb_analysis, type = "estimate") + theme_light()
response_time <- make_time_sequence_data(data, time_bin_size = 200,aois = c("SOCIAL","NONSOCIAL"),predictor_columns = c("Scramb"),summarize_by = "ps")
plot(response_time, predictor_column = "Scramb")
response_time <- make_time_sequence_data(data, time_bin_size = 200,aois = c("SOCIAL","NONSOCIAL"),summarize_by = "ps")
plot(response_time, predictor_column = "Scramb")
response_time <- make_time_sequence_data(data, time_bin_size = 200,aois = c("SOCIAL","NONSOCIAL"),summarize_by = "ps")
plot(response_time)
tb_analysis <- analyze_time_bins(data = response_time, test = "t.test", alpha = .05,p_adjust_method = "bonferroni")
response_time
head(data)
table(dat$X3)
table(data$X3)
table(data$isinR)
data$isinL=as.logical(data$isinL)
data$isinR=as.logical(data$isinR)
data$Scramb=factor(data$Scramb,levels=c(1,2),labels=c("Unscrambled","Scrambled"))
head(data)
table(data$isinL)
DATA2=DATA2[DATA2$trial_1<41,]
DATA2=DATA
DATA2=DATA2[DATA2$trial_1<41,]
DATA2=DATA2[DATA2$CURRENT_SAC_START_TIME<5000,]
DATA2=DATA2[DATA2$CURRENT_SAC_START_TIME>70,]
DATA2$SUB=factor(DATA2$SUB)
table(DATA2$SUB)
table(DATA2$trial_1)
# 500 samples per trial (100 hz)
NEWFRAMELEN=(40*77)*500
NEWFRAMELEN=(40*77)*500
# Add back in the time dimension (500 samples per trial)
EXPDATA_FRAME=data.frame(matrix(ncol=3,nrow=NEWFRAMELEN))
EXPDATA_FRAME$samp=rep(seq(0,5000,length=500))
EXPDATA_FRAME$ps=rep(as.numeric(levels(DATA2$SUB)),each=nrow(EXPDATA_FRAME)/77)
EXPDATA_FRAME$trial=rep(as.numeric(levels(DATA2$TRIAL)),each=nrow(EXPDATA_FRAME)/(77*40))
levels(DATA2$TRIAL)
View(DATA)
DATA2=DATA
# Unscrambled only
DATA2=DATA2[DATA2$trial_1<41,]
DATA2=DATA2[DATA2$CURRENT_SAC_START_TIME<5000,]
DATA2=DATA2[DATA2$CURRENT_SAC_START_TIME>70,]
DATA2$SUB=factor(DATA2$SUB)
DATA2$TRIAL=factor(DATA2$TRIAL)
NEWFRAMELEN=(40*77)*500
# Add back in the time dimension (500 samples per trial)
EXPDATA_FRAME=data.frame(matrix(ncol=3,nrow=NEWFRAMELEN))
EXPDATA_FRAME$samp=rep(seq(0,5000,length=500))
EXPDATA_FRAME$ps=rep(as.numeric(levels(DATA2$SUB)),each=nrow(EXPDATA_FRAME)/77)
EXPDATA_FRAME$trial=rep(as.numeric(levels(DATA2$TRIAL)),each=nrow(EXPDATA_FRAME)/(77*40))
for (subject in 1:length(levels(DATA2$SUB))) {
for (trial in 1:length(levels(DATA2$TRIAL))) {
# If there is data for the trial
if (nrow(DATA2[DATA2$SUB==subject & DATA2$TRIAL ==trial,])>0) {
x=sprintf(c("Doing subject %f","Trial %f"),c(subject,trial))
print(x)
# Get the starting points
locxs=DATA2[DATA2$SUB==subject & DATA2$TRIAL==trial,]$CURRENT_SAC_START_X
locys=DATA2[DATA2$SUB==subject & DATA2$TRIAL==trial,]$CURRENT_SAC_START_Y
# Get the ending points
locx=DATA2[DATA2$SUB==subject & DATA2$TRIAL==trial,]$CURRENT_SAC_END_X
locy=DATA2[DATA2$SUB==subject & DATA2$TRIAL==trial,]$CURRENT_SAC_END_Y
# Get the side of the social stim
side=DATA2[DATA2$SUB==subject & DATA2$TRIAL==trial,]$side[1]
# Resample the times
times=round((DATA2[DATA2$SUB==subject & DATA2$TRIAL==trial,]$CURRENT_SAC_START_TIME/10))
# Starting x
EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,][1:times[1],]$X1=locxs[1]
# Starting y
EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,][1:times[1],]$X2=locys[1]
# Side
EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,]$X3=rep(side,nrow(EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,]))
for (t in 1:length(times)){
if (t<length(times)){
EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,][times[t]:times[t+1],]$X1=locx[t]
EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,][times[t]:times[t+1],]$X2=locy[t]
}
else{
EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,][times[t]:nrow(EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,]),]$X1=locx[t]
EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,][times[t]:nrow(EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,]),]$X2=locy[t]
}
}
}
else{
y=sprintf(c("Cannot do subject %f","Trial %f"),c(subject,trial))
print(y)
}
}
}
save.image("~/Documents/GitHub/NH_EYETRACK_NOODLE/Workspace.RData")
# Unscrambled only
DATAS=DATAS[DATA$trial_1>40,]
DATAS=DATAS[DATAS$CURRENT_SAC_START_TIME<5000,]
DATAS=DATAS[DATAS$CURRENT_SAC_START_TIME>70,]
DATAS=DATA[DATA$trial_1>40,]
DATAS=DATAS[DATAS$CURRENT_SAC_START_TIME<5000,]
DATAS=DATAS[DATAS$CURRENT_SAC_START_TIME>70,]
DATAS$SUB=factor(DATAS$SUB)
DATAS$TRIAL=factor(DATAS$TRIAL)
NEWFRAMELEN=(40*77)*500
EXPDATA_FRAME=data.frame(matrix(ncol=3,nrow=NEWFRAMELEN))
EXPDATA_FRAME$samp=rep(seq(0,5000,length=500))
EXPDATA_FRAME$ps=rep(as.numeric(levels(DATAS$SUB)),each=nrow(EXPDATA_FRAME)/77)
EXPDATA_FRAME$trial=rep(as.numeric(levels(DATAS$TRIAL)),each=nrow(EXPDATA_FRAME)/(77*40))
table(EXPDATA_FRAME)
table(EXPDATA_FRAME$ps)
table(EXPDATA_FRAME$trial)
for (subject in 1:length(levels(DATAS$SUB))){print(DATAS$SUB)}
for (subject in 1:length(levels(DATAS$SUB))){print(subject)}
for (subject in 1:length(levels(DATAS$TRIAL))){print(trial)}
setwd("/Users/nicholashedger/Documents/Github/NH_EYETRACK_NOODLE")
DATA   <- read.csv("FV_data_raw.csv")
head(DATA)
# The last time subjects make a saccade is ~5000, so will assume that this is in ms.
max(DATA$CURRENT_SAC_START_TIME)
#Confirm sample rate
sum(DATA$CURRENT_SAC_START_TIME%%const.rep_sample_rate==0)
#Sampling rate is once every 2 milliseconds.
DATA$SUB=factor(as.numeric(DATA$RECORDING_SESSION_LABEL))
DATA$TRIAL=factor(as.numeric(DATA$trial_1))
# Make index for fixation number
DATA$index=rep(0,nrow(DATA))
for (s in 1:length(levels(DATA$SUB))) {
for (t in 1:length(levels(DATA$TRIAL))) {
if (nrow(DATA[DATA$SUB==s & DATA$TRIAL ==t,])>0) {
DATA[DATA$SUB==s & DATA$TRIAL ==t,]$index=1:nrow(DATA[DATA$SUB==s & DATA$TRIAL ==t,])}
}
}
# Would help to visualise some data.
Plotfix=function(dat,subj)
{xboundu=1432
yboundu=822
xboundl=168
yboundl=378
ggplot(dat[dat$SUB==subj,],aes(x=CURRENT_SAC_END_X,y=CURRENT_SAC_END_Y))+geom_rect(xmin =168 ,xmax=712,ymin=yboundl,ymax=yboundu)+geom_rect(xmin =888 ,xmax=1432,ymin=yboundl,ymax=yboundu)+geom_point(size=3,alpha=.4,color="red")+
facet_wrap(~TRIAL,nrow=8)+scale_x_continuous(limits=c(xboundl,xboundu))+scale_y_continuous(limits=c(yboundl,yboundu))+
geom_text(aes(label=index))+geom_path(color="blue")
}
Plotfix(DATA,1)
DATAS=DATA[DATA$trial_1>40,]
DATAS=DATAS[DATAS$CURRENT_SAC_START_TIME<5000,]
DATAS=DATAS[DATAS$CURRENT_SAC_START_TIME>70,]
DATAS$SUB=factor(DATAS$SUB)
DATAS$TRIAL=factor(DATAS$TRIAL)
NEWFRAMELEN=(40*77)*500
# Add back in the time dimension (500 samples per trial)
EXPDATA_FRAME=data.frame(matrix(ncol=3,nrow=NEWFRAMELEN))
EXPDATA_FRAME$samp=rep(seq(0,5000,length=500))
EXPDATA_FRAME$ps=rep(as.numeric(levels(DATAS$SUB)),each=nrow(EXPDATA_FRAME)/77)
EXPDATA_FRAME$trial=rep(as.numeric(levels(DATAS$TRIAL)),each=nrow(EXPDATA_FRAME)/(77*40))
for (trial in 1:length(levels(DATAS$TRIAL))) {print(trial)}
for (trial in 1:length(levels(DATAS$TRIAL))) {print(trial+40)}
table(DATAS$TRIAL)
# Accidentally overwritten EXPDATA_FRAME
for (subject in 1:length(levels(DATAS$SUB))) {
for (trial in 1:length(levels(DATAS$TRIAL))) {
trial=(trial+40)
# If there is data for the trial
if (nrow(DATAS[DATAS$SUB==subject & DATAS$TRIAL ==trial,])>0) {
x=sprintf(c("Doing subject %f","Trial %f"),c(subject,trial))
print(x)
# Get the starting points
locxs=DATAS[DATAS$SUB==subject & DATAS$TRIAL==trial,]$CURRENT_SAC_START_X
locys=DATAS[DATAS$SUB==subject & DATAS$TRIAL==trial,]$CURRENT_SAC_START_Y
# Get the ending points
locx=DATAS[DATAS$SUB==subject & DATAS$TRIAL==trial,]$CURRENT_SAC_END_X
locy=DATAS[DATAS$SUB==subject & DATAS$TRIAL==trial,]$CURRENT_SAC_END_Y
# Get the side of the social stim
side=DATAS[DATAS$SUB==subject & DATAS$TRIAL==trial,]$side[1]
# Resample the times
times=round((DATAS[DATAS$SUB==subject & DATAS$TRIAL==trial,]$CURRENT_SAC_START_TIME/10))
# Starting x
EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,][1:times[1],]$X1=locxs[1]
# Starting y
EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,][1:times[1],]$X2=locys[1]
# Side
EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,]$X3=rep(side,nrow(EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,]))
for (t in 1:length(times)){
if (t<length(times)){
EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,][times[t]:times[t+1],]$X1=locx[t]
EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,][times[t]:times[t+1],]$X2=locy[t]
}
else{
EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,][times[t]:nrow(EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,]),]$X1=locx[t]
EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,][times[t]:nrow(EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,]),]$X2=locy[t]
}
}
}
else{
y=sprintf(c("Cannot do subject %f","Trial %f"),c(subject,trial))
print(y)
}
}
}
save.image("~/Documents/GitHub/NH_EYETRACK_NOODLE/Workspace2.RData")
DATA2=DATA
# Unscrambled only
DATA2=DATA2[DATA2$trial_1<41,]
DATA2=DATA2[DATA2$CURRENT_SAC_START_TIME<5000,]
DATA2=DATA2[DATA2$CURRENT_SAC_START_TIME>70,]
DATA2$SUB=factor(DATA2$SUB)
DATA2$TRIAL=factor(DATA2$TRIAL)
# 500 samples per trial (100 hz)
NEWFRAMELEN=(40*77)*500
# Add back in the time dimension (500 samples per trial)
EXPDATA_FRAME=data.frame(matrix(ncol=3,nrow=NEWFRAMELEN))
EXPDATA_FRAME$samp=rep(seq(0,5000,length=500))
EXPDATA_FRAME$ps=rep(as.numeric(levels(DATA2$SUB)),each=nrow(EXPDATA_FRAME)/77)
EXPDATA_FRAME$trial=rep(as.numeric(levels(DATA2$TRIAL)),each=nrow(EXPDATA_FRAME)/(77*40))
for (subject in 1:length(levels(DATA2$SUB))) {
for (trial in 1:length(levels(DATA2$TRIAL))) {
# If there is data for the trial
if (nrow(DATA2[DATA2$SUB==subject & DATA2$TRIAL ==trial,])>0) {
x=sprintf(c("Doing subject %f","Trial %f"),c(subject,trial))
print(x)
# Get the starting points
locxs=DATA2[DATA2$SUB==subject & DATA2$TRIAL==trial,]$CURRENT_SAC_START_X
locys=DATA2[DATA2$SUB==subject & DATA2$TRIAL==trial,]$CURRENT_SAC_START_Y
# Get the ending points
locx=DATA2[DATA2$SUB==subject & DATA2$TRIAL==trial,]$CURRENT_SAC_END_X
locy=DATA2[DATA2$SUB==subject & DATA2$TRIAL==trial,]$CURRENT_SAC_END_Y
# Get the side of the social stim
side=DATA2[DATA2$SUB==subject & DATA2$TRIAL==trial,]$side[1]
# Resample the times
times=round((DATA2[DATA2$SUB==subject & DATA2$TRIAL==trial,]$CURRENT_SAC_START_TIME/10))
# Starting x
EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,][1:times[1],]$X1=locxs[1]
# Starting y
EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,][1:times[1],]$X2=locys[1]
# Side
EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,]$X3=rep(side,nrow(EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,]))
for (t in 1:length(times)){
if (t<length(times)){
EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,][times[t]:times[t+1],]$X1=locx[t]
EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,][times[t]:times[t+1],]$X2=locy[t]
}
else{
EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,][times[t]:nrow(EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,]),]$X1=locx[t]
EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,][times[t]:nrow(EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,]),]$X2=locy[t]
}
}
}
else{
y=sprintf(c("Cannot do subject %f","Trial %f"),c(subject,trial))
print(y)
}
}
}
NEWFRAMELEN=(40*77)*500
# Add back in the time dimension (500 samples per trial)
EXPDATA_FRAME=data.frame(matrix(ncol=3,nrow=NEWFRAMELEN))
EXPDATA_FRAME$samp=rep(seq(0,5000,length=500))
EXPDATA_FRAME$ps=rep(as.numeric(levels(DATA2$SUB)),each=nrow(EXPDATA_FRAME)/77)
EXPDATA_FRAME$trial=rep(as.numeric(levels(DATA2$TRIAL)),each=nrow(EXPDATA_FRAME)/(77*40))
for (subject in 1:length(levels(DATA2$SUB))) {
for (trial in 1:length(levels(DATA2$TRIAL))) {
# If there is data for the trial
if (nrow(DATA2[DATA2$SUB==subject & DATA2$TRIAL ==trial,])>0) {
x=sprintf(c("Doing subject %f","Trial %f"),c(subject,trial))
print(x)
# Get the starting points
locxs=DATA2[DATA2$SUB==subject & DATA2$TRIAL==trial,]$CURRENT_SAC_START_X
locys=DATA2[DATA2$SUB==subject & DATA2$TRIAL==trial,]$CURRENT_SAC_START_Y
# Get the ending points
locx=DATA2[DATA2$SUB==subject & DATA2$TRIAL==trial,]$CURRENT_SAC_END_X
locy=DATA2[DATA2$SUB==subject & DATA2$TRIAL==trial,]$CURRENT_SAC_END_Y
# Get the side of the social stim
side=DATA2[DATA2$SUB==subject & DATA2$TRIAL==trial,]$side[1]
# Resample the times
times=round((DATA2[DATA2$SUB==subject & DATA2$TRIAL==trial,]$CURRENT_SAC_START_TIME/10))
# Starting x
EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,][1:times[1],]$X1=locxs[1]
# Starting y
EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,][1:times[1],]$X2=locys[1]
# Side
EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,]$X3=rep(side,nrow(EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,]))
for (t in 1:length(times)){
if (t<length(times)){
EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,][times[t]:times[t+1],]$X1=locx[t]
EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,][times[t]:times[t+1],]$X2=locy[t]
}
else{
EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,][times[t]:nrow(EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,]),]$X1=locx[t]
EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,][times[t]:nrow(EXPDATA_FRAME[EXPDATA_FRAME$ps==subject & EXPDATA_FRAME$trial==trial,]),]$X2=locy[t]
}
}
}
else{
y=sprintf(c("Cannot do subject %f","Trial %f"),c(subject,trial))
print(y)
}
}
}
# Now scram
DATAS=DATA[DATA$trial_1>40,]
DATAS=DATAS[DATAS$CURRENT_SAC_START_TIME<5000,]
DATAS=DATAS[DATAS$CURRENT_SAC_START_TIME>70,]
DATAS$SUB=factor(DATAS$SUB)
DATAS$TRIAL=factor(DATAS$TRIAL)
# 500 samples per trial (100 hz)
NEWFRAMELEN=(40*77)*500
# Add back in the time dimension (500 samples per trial)
EXPDATA_FRAMES=data.frame(matrix(ncol=3,nrow=NEWFRAMELEN))
EXPDATA_FRAMES$samp=rep(seq(0,5000,length=500))
EXPDATA_FRAMES$ps=rep(as.numeric(levels(DATAS$SUB)),each=nrow(EXPDATA_FRAMES)/77)
EXPDATA_FRAMES$trial=rep(as.numeric(levels(DATAS$TRIAL)),each=nrow(EXPDATA_FRAMES)/(77*40))
# Accidentally overwritten EXPDATA_FRAME
for (subject in 1:length(levels(DATAS$SUB))) {
for (trial in 1:length(levels(DATAS$TRIAL))) {
trial=(trial+40)
# If there is data for the trial
if (nrow(DATAS[DATAS$SUB==subject & DATAS$TRIAL ==trial,])>0) {
x=sprintf(c("S_Doing subject %f","Trial %f"),c(subject,trial))
print(x)
# Get the starting points
locxs=DATAS[DATAS$SUB==subject & DATAS$TRIAL==trial,]$CURRENT_SAC_START_X
locys=DATAS[DATAS$SUB==subject & DATAS$TRIAL==trial,]$CURRENT_SAC_START_Y
# Get the ending points
locx=DATAS[DATAS$SUB==subject & DATAS$TRIAL==trial,]$CURRENT_SAC_END_X
locy=DATAS[DATAS$SUB==subject & DATAS$TRIAL==trial,]$CURRENT_SAC_END_Y
# Get the side of the social stim
side=DATAS[DATAS$SUB==subject & DATAS$TRIAL==trial,]$side[1]
# Resample the times
times=round((DATAS[DATAS$SUB==subject & DATAS$TRIAL==trial,]$CURRENT_SAC_START_TIME/10))
# Starting x
EXPDATA_FRAMES[EXPDATA_FRAMES$ps==subject & EXPDATA_FRAMES$trial==trial,][1:times[1],]$X1=locxs[1]
# Starting y
EXPDATA_FRAMES[EXPDATA_FRAMES$ps==subject & EXPDATA_FRAMES$trial==trial,][1:times[1],]$X2=locys[1]
# Side
EXPDATA_FRAMES[EXPDATA_FRAMES$ps==subject & EXPDATA_FRAMES$trial==trial,]$X3=rep(side,nrow(EXPDATA_FRAMES[EXPDATA_FRAMES$ps==subject & EXPDATA_FRAMES$trial==trial,]))
for (t in 1:length(times)){
if (t<length(times)){
EXPDATA_FRAMES[EXPDATA_FRAMES$ps==subject & EXPDATA_FRAMES$trial==trial,][times[t]:times[t+1],]$X1=locx[t]
EXPDATA_FRAMES[EXPDATA_FRAMES$ps==subject & EXPDATA_FRAMES$trial==trial,][times[t]:times[t+1],]$X2=locy[t]
}
else{
EXPDATA_FRAMES[EXPDATA_FRAMES$ps==subject & EXPDATA_FRAMES$trial==trial,][times[t]:nrow(EXPDATA_FRAMES[EXPDATA_FRAMES$ps==subject & EXPDATA_FRAMES$trial==trial,]),]$X1=locx[t]
EXPDATA_FRAMES[EXPDATA_FRAMES$ps==subject & EXPDATA_FRAMES$trial==trial,][times[t]:nrow(EXPDATA_FRAMES[EXPDATA_FRAMES$ps==subject & EXPDATA_FRAMES$trial==trial,]),]$X2=locy[t]
}
}
}
else{
y=sprintf(c("Cannot do subject %f","Trial %f"),c(subject,trial))
print(y)
}
}
}
save.image("~/Documents/GitHub/NH_EYETRACK_NOODLE/Workspace3.RData")
