plot(response_time,predictor_column = "X3")
tb_analysis <- analyze_time_bins(data = response_time, predictor_column = "X3", test = "t.test", alpha = .01,p_adjust_method = 'bonferroni')
LEFTAOI=plot(tb_analysis, type = "estimate") + theme_light()
LEFTAOI
response_time <- make_time_sequence_data(data, time_bin_size = 50,aois = c("isinL"),predictor_columns = c("X3"),summarize_by = "ps")
plot(response_time,predictor_column = "X3")
tb_analysis <- analyze_time_bins(data = response_time, predictor_column = "X3", test = "t.test", alpha = .01,p_adjust_method = 'bonferroni')
LEFTAOI=plot(tb_analysis, type = "estimate") + theme_light()
LEFTAOI
response_time <- make_time_sequence_data(data, time_bin_size = 50,aois = c("isinL","isinR",summarize_by = "ps")
response_time <- make_time_sequence_data(data, time_bin_size = 50,aois = c("isinL","isinR"),summarize_by = "ps")
plot(response_time)
response_time <- make_time_sequence_data(data, time_bin_size = 50,aois = c("isinL"),predictor_column = "X3",summarize_by = "ps")
plot(response_time)
plot(response_time,predictor_column = "X3")
tb_analysis <- analyze_time_bins(data = response_time, predictor_column = "X3", test = "t.test", alpha = .01,p_adjust_method = 'bonferroni')
LEFTAOI=plot(tb_analysis, type = "estimate") + theme_light()
LEFTAOI
tb_analysis <- analyze_time_bins(data = response_time, predictor_column = "X3", test = "t.test", alpha = .001,p_adjust_method = 'bonferroni')
LEFTAOI=plot(tb_analysis, type = "estimate") + theme_light()
LEFTAOI
response_time <- make_time_sequence_data(data, time_bin_size = 50,aois = c("isinL","isinR"),predictor_column = "X3",summarize_by = "ps")
plot(response_time,predictor_column = "X3")
tb_analysis <- analyze_time_bins(data = response_time, predictor_column = "X3", test = "t.test", alpha = .001,p_adjust_method = 'bonferroni')
tb_analysis <- analyze_time_bins(data = response_time, predictor_column = "X3", test = "t.test",,aois = c("isinL","isinR"), alpha = .001,p_adjust_method = 'bonferroni')
tb_analysis <- analyze_time_bins(data = response_time, predictor_column = "X3", test = "t.test",aois = c("isinL","isinR"), alpha = .001,p_adjust_method = 'bonferroni')
tb_analysis <- analyze_time_bins(data = response_time, predictor_column = "X3", test = "t.test",aois = c("isinL"), alpha = .001,p_adjust_method = 'bonferroni')
LEFTAOI=plot(tb_analysis, type = "estimate") + theme_light()
LEFTAOI
LEFTAOI=plot(tb_analysis, type = "pvalue") + theme_light()
LEFTAOI
LEFTAOI=plot(tb_analysis, type = "neg_log_pvalue") + theme_light()
LEFTAOI
head(response_time)
bysubplot=ggplot(response_time,aes(x=TimeBin,y=Prop))+geom_point()
bysubplot
bysubplot=ggplot(response_time,aes(x=TimeBin,y=Prop))+geom_point(aes(color=AOI))+facet_wrap(ps,ncol=8)
bysubplot=ggplot(response_time,aes(x=TimeBin,y=Prop))+geom_point(aes(color=AOI))+facet_wrap(~ps,ncol=8)
bysubplot
bysubplot=ggplot(response_time,aes(x=TimeBin,y=Prop))+geom_point(aes(color=AOI,shape=X3))+facet_wrap(~ps,ncol=8)
bysubplot
bysubplot=ggplot(response_time[response_time$AOI="iisinL",],aes(x=TimeBin,y=Prop))+geom_point(aes(color=AOI,shape=X3))+facet_wrap(~ps,ncol=8)
bysubplot=ggplot(response_time[response_time$AOI=="iisinL",],aes(x=TimeBin,y=Prop))+geom_point(aes(color=AOI,shape=X3))+facet_wrap(~ps,ncol=8)
bysubplot
bysubplot=ggplot(response_time[response_time$AOI=="isinL",],aes(x=TimeBin,y=Prop))+geom_point(aes(color=AOI,shape=X3))+facet_wrap(~ps,ncol=8)
bysubplot
bysubplot=ggplot(response_time[response_time$AOI=="isinL",],aes(x=TimeBin,y=Prop))+geom_point(aes(color=X3))+facet_wrap(~ps,ncol=8)
bysubplot
bysubplot=ggplot(response_time,aes(x=TimeBin,y=Prop))+geom_point(aes(color=X3))+facet_wrap(~ps,ncol=8)
bysubplot
bysubplot=ggplot(response_time[response_time$X3=="RightSoc",],aes(x=TimeBin,y=Prop))+geom_point(aes(color=X3))+facet_wrap(~ps,ncol=8)
bysubplot
bysubplot=ggplot(response_time[response_time$X3=="Rightsoc",],aes(x=TimeBin,y=Prop))+geom_point(aes(color=X3))+facet_wrap(~ps,ncol=8)
bysubplot
bysubplot=ggplot(response_time[response_time$X3=="Rightsoc",],aes(x=TimeBin,y=Prop))+geom_point(aes(color=AOI))+facet_wrap(~ps,ncol=8)
bysubplot
bysubplot=ggplot(response_time[response_time$X3=="Leftsoc",],aes(x=TimeBin,y=Prop))+geom_point(aes(color=AOI))+facet_wrap(~ps,ncol=8)
bysubplot
bysubplot=ggplot(response_time[response_time$X3=="LeftSoc",],aes(x=TimeBin,y=Prop))+geom_point(aes(color=AOI))+facet_wrap(~ps,ncol=8)
bysubplot
response_window <- subset_by_window(data,
window_start_time = 100,
window_end_time = 50000,
rezero = FALSE)
onsets <- make_onset_data(response_window_clean, onset_time = 15500, fixation_window_length = 100, target_aoi='isinL')
onsets <- make_onset_data(response_window, onset_time = 15500, fixation_window_length = 100, target_aoi='isinL')
onsets <- make_onset_data(response_window, onset_time = 100, fixation_window_length = 100, target_aoi='isinL')
# participants' ability to orient to the trial target overall:
plot(onsets) + theme(legend.text=element_text(size=5))
head(onsets)
onsets <- make_onset_data(response_window, onset_time = 100, fixation_window_length = 100, target_aoi='isinL', predictor_columns = "X3")
# participants' ability to orient to the trial target overall:
plot(onsets) + theme(legend.text=element_text(size=5))
onsets <- make_onset_data(response_window, onset_time = 100, fixation_window_length = 100, target_aoi='isinL')
# participants' ability to orient to the trial target overall:
plot(onsets, predictor_columns = "X3") + theme(legend.text=element_text(size=5))
ifelse(1<1 & 4>2,1,2)
ifelse(3<4 & 3>2,1,2)
table(EXPDATA_FRAME$X1)
sum(is.na(EXPDATA_FRAME$X1))
EXPDATA_FRAME$AOI=rep(0,nrow(EXPDATA_FRAME))
for (i in 1:nrow(EXPDATA_FRAME)){
if (is.na(EXPDATA_FRAME$X1[i])){
EXPDATA_FRAME$AOI[i]==""}
else if (EXPDATA_FRAME$X1[i]<1432 & EXPDATA_FRAME$X1[i]>888 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378){
EXPDATA_FRAME$AOI[i]=2}
else if (EXPDATA_FRAME$X1[i]<712 & EXPDATA_FRAME$X1[i]>168 & EXPDATA_FRAME$X2[i]<822 & EXPDATA_FRAME$X2[i]>378){
EXPDATA_FRAME$AOI[i]=1}
}
EXPDATA_FRAME$SOCIAL=as.logical(ifelse(EXPDATA_FRAME$X3==EXPDATA_FRAME$AOI,1,0))
EXPDATA_FRAME$NONSOCIAL=as.logical(ifelse(EXPDATA_FRAME$X3!=EXPDATA_FRAME$AOI & EXPDATA_FRAME$AOI!=0 ,1,0))
EXPDATA_FRAME$track=as.logical(rep(0,nrow(EXPDATA_FRAME)))
table(EXPDATA_FRAME)
head(EXPDATA_FRAME)
COPY=EXPDATA_FRAME
data <- make_eyetrackingr_data(EXPDATA_FRAME,
participant_column = "ps",
trial_column = "trial",
time_column = "samp",
aoi_columns = c('isinL','isinR',"SOCIAL","NONSOCIAL"),
treat_non_aoi_looks_as_missing = TRUE,trackloss_column="track"
)
response_time <- make_time_sequence_data(data, time_bin_size = 50,aois = c("SOCIAL","NONSOCIAL"),summarize_by = "ps")
plot(response_time)
bysubplot=ggplot(response_time,aes(x=TimeBin,y=Prop))+geom_point(aes(color=AOI))+facet_wrap(~ps,ncol=8)
bysubplot
bysubplot=ggplot(response_time,aes(x=TimeBin,y=Prop))+geom_line(aes(color=AOI))+facet_wrap(~ps,ncol=8)
bysubplot
response_time <- make_time_sequence_data(data, time_bin_size = 100,aois = c("SOCIAL","NONSOCIAL"),summarize_by = "ps")
bysubplot=ggplot(response_time,aes(x=TimeBin,y=Prop))+geom_line(aes(color=AOI))+facet_wrap(~ps,ncol=8)
bysubplot
response_timeglob <- make_time_sequence_data(data, time_bin_size = 100,aois = c("SOCIAL","NONSOCIAL"))
globplot=ggplot(response_time,aes(x=TimeBin,y=Prop))+geom_line(aes(color=AOI))
globplot
globplot=ggplot(response_time,aes(x=TimeBin,y=Prop))+geom_point(aes(color=AOI))
globplot
globplot=ggplot(response_time,aes(x=TimeBin,y=Prop))+geom_point(aes(color=AOI))+geom_smooth()
globplot
globplot=ggplot(response_time,aes(x=TimeBin,y=Prop))+geom_point(aes(color=AOI))+geom_smooth(aes(color=AOI))
globplot
globplot=ggplot(response_time,aes(x=TimeBin,y=Prop))+geom_point(aes(color=AOI))+geom_smooth(aes(color=AOI),method="loess")
globplot
plot(response_time)
plot(response_time)
response_window_agg_by_sub <- make_time_window_data(data, aois=c("SOCIAL","NONSOCIAL"),summarize_by = "ps")
plot(response_window_agg_by_sub)
plot(response_time)
tb_analysis <- analyze_time_bins(data = response_time,test = "t.test",aois = c("SOCIAL","NONSOCIAL"), alpha = .001,p_adjust_method = 'bonferroni')
head(data)
data$X3=factor(data$X3,levels=c(1,2),labels=c("LeftSoc","Rightsoc"))
tb_analysis <- analyze_time_bins(data = response_time,test = "t.test",aois = c("isinL"),predictor_column =X3  alpha = .001,p_adjust_method = 'bonferroni')
tb_analysis <- analyze_time_bins(data = response_time,test = "t.test",aois = c("isinL"),predictor_column =X3,  alpha = .001,p_adjust_method = 'bonferroni')
head(data)
tb_analysis <- analyze_time_bins(data = response_time,test = "t.test",aois = c("isinL"),predictor_column ="X3",  alpha = .001,p_adjust_method = 'bonferroni')
tb_analysis <- analyze_time_bins(data = response_time,test = "t.test",aoi ="isinL",predictor_column ="X3",  alpha = .001,p_adjust_method = 'bonferroni')
tb_analysis <- analyze_time_bins(data = response_time,test = "t.test",aois ="isinL",predictor_column ="X3",  alpha = .001,p_adjust_method = 'bonferroni')
LEFTAOI=plot(tb_analysis, type = "neg_log_pvalue") + theme_light()
tb_analysis <- analyze_time_bins(data = response_time,test = "t.test",aois ="isinL",predictor_column =c("X3"),  alpha = .001,p_adjust_method = 'bonferroni')
tb_analysis <- analyze_time_bins(data = response_time,test = "t.test",predictor_column =c("X3"),  alpha = .001,p_adjust_method = 'bonferroni')
response_time <- make_time_sequence_data(data, time_bin_size = 100,aois = c("SOCIAL"),summarize_by = "ps")
tb_analysis <- analyze_time_bins(data = response_time,test = "t.test",predictor_column =c("X3"),  alpha = .001,p_adjust_method = 'bonferroni')
response_time <- make_time_sequence_data(data, time_bin_size = 100,aois = c("SOCIAL"),predictor_columns=c("X3"),summarize_by = "ps")
tb_analysis <- analyze_time_bins(data = response_time,test = "t.test",predictor_column =c("X3"),  alpha = .001,p_adjust_method = 'bonferroni')
plot(response_time, predictor_column = "X3") + theme_light()
plot(tb_analysis, type = "estimate") + theme_light()
plot(response_time, predictor_column = "X3") + theme_light()
response_time <- make_time_sequence_data(data, time_bin_size = 100,aois = c("isinL"),predictor_columns=c("X3"),summarize_by = "ps")
tb_analysis <- analyze_time_bins(data = response_time,test = "t.test",predictor_column =c("X3"),  alpha = .001,p_adjust_method = 'bonferroni')
plot(response_time, predictor_column = "X3") + theme_light()
plot(tb_analysis, type = "estimate") + theme_light()
response_timeR <- make_time_sequence_data(data, time_bin_size = 100,aois = c("isinR"),predictor_columns=c("X3"),summarize_by = "ps")
tb_analysisR <- analyze_time_bins(data = response_timeL,test = "t.test",predictor_column =c("X3"),  alpha = .05,p_adjust_method = 'bonferroni')
plot(response_timeR, predictor_column = "X3") + theme_light()
plot(tb_analysisR, type = "estimate") + theme_light()
response_timeG <- make_time_sequence_data(data, time_bin_size = 100,aois = c("isinL","isinR"),predictor_columns=c("X3"),summarize_by = "ps")
plot(response_timeG, predictor_column = "X3") + theme_light()
response_timeS <- make_time_sequence_data(data, time_bin_size = 100,aois = c("SOCIAL","NONSOCIAL"),summarize_by = "ps")
plot(response_timeS) + theme_light()
plot(response_timeS) + theme_light()+geom_line(aes(colour=AOI))
response_timeS <- make_time_sequence_data(data, time_bin_size = 100,aois = c("SOCIAL","NONSOCIAL"),summarize_by = "ps")
plot(response_timeS) + theme_light()+geom_point(aes(colour=AOI))
response_timeS <- make_time_sequence_data(data, time_bin_size = 100,aois = c("SOCIAL","NONSOCIAL"),summarize_by = "ps")
plot(response_timeS) + theme_light()+facet_grid()
plot(response_timeS) + theme_light()+facet_grid(.)
plot(response_timeS) + theme_light()+facet_grid(~AOI)
plot(response_timeS) + theme_light()+facet_grid(AOI~)
plot(response_timeS) + theme_light()+facet_grid(AOI~.)
response_timeS <- make_time_sequence_data(data, time_bin_size = 100,aois = c("SOCIAL","NONSOCIAL"),summarize_by = "ps")
plot(response_timeS) + theme_light()+facet_grid("None")
plot(response_timeS) + theme_light()+facet_grid(FALSE)
plot(response_timeS) + theme_light()-facet_grid()
head(data)
plot(response_timeS) + theme_light()+facet_grid(track~)
plot(response_timeS) + theme_light()+facet_grid(track~.)
plot(response_timeS) + theme_light()+facet_grid(~track)
plot(response_timeS) + theme_light()+facet_grid(~factor(track))
head(response_timeS)
plot(response_timeS) + theme_light()+facet_grid(~ps)
plot(response_timeS) + theme_light())+facet_wrap(~ps,ncol=8)
plot(response_timeS) + theme_light()+facet_wrap(~ps,ncol=8)
response_timeG <- make_time_sequence_data(data, time_bin_size = 100,aois = c("isinL","isinR"),predictor_columns=c("X3"),summarize_by = "ps")
plot(response_timeG, predictor_column = "X3") + theme_light()
response_window <- subset_by_window(data, window_start_time = 100, window_end_time = 50000, rezero = FALSE)
onsets <- make_onset_data(response_window, onset_time = 100, fixation_window_length = 100, target_aoi='SOCIAL')
plot(onsets) + theme(legend.text=element_text(size=5))
plot(response_time)
response_time <- make_time_sequence_data(data, time_bin_size = 100,aois = c("SOCIAL","NONSOCIAL"),summarize_by = "ps")
plot(response_time)
response_timeG <- make_time_sequence_data(data, time_bin_size = 100,aois = c("isinL","isinR"),predictor_columns=c("X3"),summarize_by = "ps")
plot(response_timeG, predictor_column = "X3") + theme_light()
head(response_timeG)
model_time_sequence <- lmer(Elog ~ X3*(ot1) + (1 + ot1 | ps),data = response_timeG, REML = FALSE)
broom::tidy(model_time_sequence, effects = "fixed")
drop1(model_time_sequence, ~., test="Chi")
model_time_sequence <- lmer(Elog ~ X3*AOI+(1|ps),data = response_timeG, REML = FALSE)
broom::tidy(model_time_sequence, effects = "fixed")
drop1(model_time_sequence, ~., test="Chi")
plot(response_timeG, predictor_column = "X3", dv = "Elog", model = model_time_sequence) +theme_light()
model_time_sequence <- lmer(Elog ~ X3*AOI*(ot1)+(1+ot1|ps),data = response_timeG, REML = FALSE)
broom::tidy(model_time_sequence, effects = "fixed")
drop1(model_time_sequence, ~., test="Chi")
plot(response_timeG, predictor_column = "X3", dv = "Elog", model = model_time_sequence) +theme_light()
model_time_sequence <- lmer(Elog ~ X3*AOI*(ot1+ot2)+(1|ps),data = response_timeG, REML = FALSE)
broom::tidy(model_time_sequence, effects = "fixed")
drop1(model_time_sequence, ~., test="Chi")
plot(response_timeG, predictor_column = "X3", dv = "Elog", model = model_time_sequence) +theme_light()
model_time_sequence <- lmer(Elog ~ X3*AOI*(ot1+ot2+ot3)+(1|ps),data = response_timeG, REML = FALSE)
broom::tidy(model_time_sequence, effects = "fixed")
drop1(model_time_sequence, ~., test="Chi")
plot(response_timeG, predictor_column = "X3", dv = "Elog", model = model_time_sequence) +theme_light()
model_time_sequence <- lmer(Elog ~ X3*AOI*(ot1+ot2+ot3+ot4)+(1|ps),data = response_timeG, REML = FALSE)
broom::tidy(model_time_sequence, effects = "fixed")
drop1(model_time_sequence, ~., test="Chi")
plot(response_timeG, predictor_column = "X3", dv = "Elog", model = model_time_sequence) +theme_light()
model_time_sequence <- lmer(Elog ~ X3*(ot1+ot2+ot3+ot4)*AOI*(ot1+ot2+ot3+ot4)+(1|ps),data = response_timeG, REML = FALSE)
model_time_sequence <- lmer(Elog ~ *AOI*(ot1+ot2+ot3+ot4)+(1|ps),data = response_timeG, REML = FALSE)
broom::tidy(model_time_sequence, effects = "fixed")
drop1(model_time_sequence, ~., test="Chi")
model_time_sequence <- lmer(Elog ~ AOI*(ot1+ot2+ot3+ot4)+(1|ps),data = response_timeG, REML = FALSE)
broom::tidy(model_time_sequence, effects = "fixed")
drop1(model_time_sequence, ~., test="Chi")
plot(response_timeG, predictor_column = "X3", dv = "Elog", model = model_time_sequence) +theme_light()
model_time_sequence <- lmer(Elog ~ AOI*(ot1+ot2+ot3+ot4)+(1|ps),data = response_time, REML = FALSE)
broom::tidy(model_time_sequence, effects = "fixed")
drop1(model_time_sequence, ~., test="Chi")
plot(response_time, predictor_column = "AOI", dv = "Elog", model = model_time_sequence) +theme_light()
plot(response_time, predictor_column = "AOI", dv = "prop", model = model_time_sequence) +theme_light()
plot(response_time, predictor_column = "AOI", dv = "Prop", model = model_time_sequence) +theme_light()
model_time_sequence <- lmer(Prop ~ AOI*(ot1+ot2+ot3+ot4)+(1|ps),data = response_time, REML = FALSE)
broom::tidy(model_time_sequence, effects = "fixed")
drop1(model_time_sequence, ~., test="Chi")
plot(response_time, predictor_column = "AOI", dv = "Prop", model = model_time_sequence) +theme_light()
model_time_sequence <- lmer(Prop ~ AOI*(ot1+ot2)+(1|ps),data = response_time, REML = FALSE)
broom::tidy(model_time_sequence, effects = "fixed")
drop1(model_time_sequence, ~., test="Chi")
plot(response_time, predictor_column = "AOI", dv = "Prop", model = model_time_sequence) +theme_light()
model_time_sequence
summary(model_time_sequence)
ranef(model_time_sequence)
model_time_sequence <- lmer(Prop ~ AOI*(ot1+ot2)+(1+ot1+ot2|ps),data = response_time, REML = FALSE)
broom::tidy(model_time_sequence, effects = "fixed")
drop1(model_time_sequence, ~., test="Chi")
plot(response_time, predictor_column = "AOI", dv = "Prop", model = model_time_sequence) +theme_light()
ranef(model_time_sequence)
head(response_time)
qplot(response_time$ot1)
qplot(response_time$ot1)+geom_point()
qplot(response_time$TimeBin,response_time$ot1)
plot(response_time, predictor_column = "AOI", dv = "Prop", model = model_time_sequence) +theme_light()
response_window <- subset_by_window(data, window_start_time = 100, window_end_time = 50000, rezero = FALSE)
onsets <- make_onset_data(response_window, onset_time = 100, fixation_window_length = 100, target_aoi='SOCIAL')
# participants' ability to orient to the trial target overall:
plot(onsets) + theme(legend.text=element_text(size=5))
head(onsets)
response_window <- subset_by_window(data, window_start_time = 0, window_end_time = 50000, rezero = FALSE)
onsets <- make_onset_data(response_window, onset_time = 0, fixation_window_length = 100, target_aoi='SOCIAL',distractor_aoi = 'NONSOCIAL')
# participants' ability to orient to the trial target overall:
plot(onsets) + theme(legend.text=element_text(size=5))
table(onsets$FirstAOI)
nrow(onsets)
12500+35000
onsets <- make_onset_data(response_window, onset_time = 0, fixation_window_length = 50, target_aoi='SOCIAL',distractor_aoi = 'NONSOCIAL')
# participants' ability to orient to the trial target overall:
plot(onsets) + theme(legend.text=element_text(size=5))
onset_switches <- make_switch_data(onsets)
s switch times
plot(onset_switches)
model_switches <- lmer(FirstSwitch ~ FirstAOIC*(1 | Trial) + (1 | ps), data=onset_switches, REML=FALSE)
head(onset_switches)
model_switches <- lmer(FirstSwitch ~ FirstAOI*(1 | Trial) + (1 | ps), data=onset_switches, REML=FALSE)
model_switches <- lmer(FirstSwitch ~ FirstAOI + (1 | ps), data=onset_switches, REML=FALSE)
model_switches
drop1(model_switches,~.,test="Chi")
Plottime=function(dat,subj,trial)
{xboundu=1432
yboundu=822
xboundl=168
yboundl=378
ggplot(dat[dat$ps==subj & dat$trial==trial,],aes(x=X1,y=X2))+geom_rect(xmin =168 ,xmax=712,ymin=yboundl,ymax=yboundu)+geom_rect(xmin =888 ,xmax=1432,ymin=yboundl,ymax=yboundu)+geom_point(size=3,alpha=.4,aes(color=AOI))+
scale_x_continuous(limits=c(xboundl,xboundu))+scale_y_continuous(limits=c(yboundl,yboundu))+
geom_path(color="blue")
}
sdx=Plottime(EXPDATA_FRAME,1,1)
sdx
sd=qplot(EXPDATA_FRAME[EXPDATA_FRAME$ps==1 & EXPDATA_FRAME$trial==1,]$samp,EXPDATA_FRAME[EXPDATA_FRAME$ps==1 & EXPDATA_FRAME$trial==58,]$X1)
sd
sd=qplot(EXPDATA_FRAME[EXPDATA_FRAME$ps==1 & EXPDATA_FRAME$trial==1,]$samp,EXPDATA_FRAME[EXPDATA_FRAME$ps==1 & EXPDATA_FRAME$trial==q,]$X1)
sd
sd=qplot(EXPDATA_FRAME[EXPDATA_FRAME$ps==1 & EXPDATA_FRAME$trial==1,]$samp,EXPDATA_FRAME[EXPDATA_FRAME$ps==1 & EXPDATA_FRAME$trial==1,]$X1)
sd
sdx=Plottime(EXPDATA_FRAME,1,2)
sdx
sdx=Plottime(EXPDATA_FRAME,1,3)
sdx
sdx=Plottime(EXPDATA_FRAME,1,5)
sdx
sd
onsets <- make_onset_data(response_window, onset_time = 500, fixation_window_length = 50, target_aoi='SOCIAL',distractor_aoi = 'NONSOCIAL')
# participants' ability to orient to the trial target overall:
plot(onsets) + theme(legend.text=element_text(size=5))
model_switches <- lmer(FirstSwitch ~ FirstAOI + (1 | ps), data=onset_switches, REML=FALSE)
drop1(model_switches,~.,test="Chi")
onset_switches <- make_switch_data(onsets)
# visualize subject's switch times
plot(onset_switches)
model_switches <- lmer(FirstSwitch ~ FirstAOI + (1 | ps), data=onset_switches, REML=FALSE)
drop1(model_switches,~.,test="Chi")
head(onset_switches)
broom::tidy(model_time_sequence, effects = "fixed")
drop1(model_time_sequence, ~., test="Chi")
model_time_sequence <- lmer(Prop ~ AOI*(ot1+ot2+ot4+ot5)+(1|ps),data = response_time, REML = FALSE)
broom::tidy(model_time_sequence, effects = "fixed")
drop1(model_time_sequence, ~., test="Chi")
plot(response_time, predictor_column = "AOI", dv = "Prop", model = model_time_sequence) +theme_light()
model_time_sequence <- lmer(Prop ~ AOI*(ot1+ot2+ot4+ot5+ot6+ot7)+(1|ps),data = response_time, REML = FALSE)
broom::tidy(model_time_sequence, effects = "fixed")
drop1(model_time_sequence, ~., test="Chi")
plot(response_time, predictor_column = "AOI", dv = "Prop", model = model_time_sequence) +theme_light()
model_time_sequence <- lmer(Prop ~ AOI*(ot1+ot2+ot4+ot5+ot6+ot7+ot8+ot9)+(1|ps),data = response_time, REML = FALSE)
broom::tidy(model_time_sequence, effects = "fixed")
drop1(model_time_sequence, ~., test="Chi")
plot(response_time, predictor_column = "AOI", dv = "Prop", model = model_time_sequence) +theme_light()
model_time_sequence <- lmer(Prop ~ AOI*(ot1+ot2+ot4)+(1|ps),data = response_time, REML = FALSE)
broom::tidy(model_time_sequence, effects = "fixed")
drop1(model_time_sequence, ~., test="Chi")
plot(response_time, predictor_column = "AOI", dv = "Prop", model = model_time_sequence) +theme_light()
model_time_sequence <- lmer(Prop ~ AOI*(ot1+ot2+ot3+ot4)+(1|ps),data = response_time, REML = FALSE)
broom::tidy(model_time_sequence, effects = "fixed")
drop1(model_time_sequence, ~., test="Chi")
plot(response_time, predictor_column = "AOI", dv = "Prop", model = model_time_sequence) +theme_light()
model_time_sequence <- lmer(Prop ~ AOI*(ot2)+(1|ps),data = response_time, REML = FALSE)
broom::tidy(model_time_sequence, effects = "fixed")
drop1(model_time_sequence, ~., test="Chi")
plot(response_time, predictor_column = "AOI", dv = "Prop", model = model_time_sequence) +theme_light()
model_time_sequence <- lmer(Prop ~ AOI*(ot4)+(1|ps),data = response_time, REML = FALSE)
broom::tidy(model_time_sequence, effects = "fixed")
drop1(model_time_sequence, ~., test="Chi")
plot(response_time, predictor_column = "AOI", dv = "Prop", model = model_time_sequence) +theme_light()
onsets <- make_onset_data(response_window, onset_time = 500, fixation_window_length = 50, target_aoi='SOCIAL',distractor_aoi = 'NONSOCIAL')
# participants' ability to orient to the trial target overall:
plot(onsets) + theme(legend.text=element_text(size=5))
onset_switches <- make_switch_data(onsets)
# visualize subject's switch times
plot(onset_switches)
model_switches <- lmer(FirstSwitch ~ FirstAOI + (1 | ps), data=onset_switches, REML=FALSE)
model_switches
library(effects)
plot(allEffects(model_time_sequence))
drop1(model_switches,~.,test="Chi")
effects(model_switches)
Effects(model_switches)
allEffects(model_switches)
allEffects(model_time_sequence)
head(response_time)
tb_analysis <- analyze_time_bins(data = response_time, test = "t.test",predictor_column = AOI, alpha = .05)
tb_analysis <- analyze_time_bins(data = response_time, test = "t.test",predictor_column = "AOI", alpha = .05)
tb_analysis
plot(tb_analysis, type = "estimate") + theme_light()
tb_analysis <- analyze_time_bins(data = response_time, test = "t.test",predictor_column = "AOI", alpha = .05,p_adjust_method = "bonferroni")
plot(tb_analysis, type = "estimate") + theme_light()
df_timeclust <- make_time_cluster_data(response_time, test= "t.test", paired=TRUE,predictor_column = "AOI", threshold = threshold_t)
num_sub = length(unique((response_time$ps)))
threshold_t = qt(p = 1 - .05/2, df = num_sub-1)
threshold_t
df_timeclust <- make_time_cluster_data(response_time, test= "t.test", paired=TRUE,predictor_column = "AOI", threshold = threshold_t)
df_timeclust
plot(df_timeclust)
summary(df_timeclust)
clust_analysis <- analyze_time_clusters(df_timeclust, within_subj=TRUE, paired=TRUE,samples=150)
plot(clust_analysis) + theme_light()
summary(clust_analysis)
plot(tb_analysis)
plot(tb_analysis,type="p")
plot(tb_analysis,type="logp")
plot(tb_analysis,type="neg_log_pvalue")
tb_analysis <- analyze_time_bins(data = response_time, test = "t.test",predictor_column = "AOI", alpha = .05,p_adjust_method = "bonferroni",treatment_level = SOCIAL)
plot(tb_analysis,type="estimate")
tb_analysis <- analyze_time_bins(data = response_time, test = "t.test",predictor_column = "AOI", alpha = .05,p_adjust_method = "bonferroni",treatment_level = NONSOCIAL)
plot(tb_analysis,type="estimate")
tb_analysis <- analyze_time_bins(data = response_time, test = "t.test",predictor_column = "AOI", alpha = .05,p_adjust_method = "bonferroni",treatment_level = "SOCIAL")
plot(tb_analysis,type="estimate")
head(response_time)
tb_analysis <- analyze_time_bins(data = response_time, test = "t.test",predictor_column = "AOI", alpha = .05,p_adjust_method = "bonferroni",treatment_level = "NONSOCIAL")
plot(tb_analysis,type="estimate")
table(response_time$AOI)
tb_analysis <- analyze_time_bins(data = response_time, test = "t.test",predictor_column = "AOI", alpha = .05,p_adjust_method = "bonferroni",treatment_level = NONSOCIAL)
plot(tb_analysis,type="estimate")
plot(tb_analysis,type="estimate")
summary(tb_analysis)
response_time <- make_time_sequence_data(data, time_bin_size = 100,aois = c("NONSOCIAL","SOCIAL"),summarize_by = "ps")
plot(response_time)
tb_analysis <- analyze_time_bins(data = response_time, test = "t.test",predictor_column = "AOI", alpha = .05,p_adjust_method = "bonferroni",treatment_level = NONSOCIAL)
plot(tb_analysis,type="estimate")
tb_analysis
plot(response_time[response_time$AOI=="SOCIAL",]$Prop)
plot(response_time[response_time$AOI=="SOCIAL",]$Prop)-response_time[response_time$AOI=="NONSOCIAL",]$Prop)
plot(response_time[response_time$AOI=="SOCIAL",]$Prop-response_time[response_time$AOI=="NONSOCIAL",]$Prop)
plot(tb_analysis,type="statistic")
plot(tb_analysis,type="statistic")
plot(tb_analysis,type="ne")
plot(tb_analysis,type="ne")
bysubplot=ggplot(response_time,aes(x=TimeBin,y=Prop))+geom_line(aes(color=AOI))+facet_wrap(~ps,ncol=20)
bysubplot
bysubplot=ggplot(response_time,aes(x=TimeBin,y=Prop))+geom_line(aes(color=AOI))+facet_wrap(~ps,ncol=15)
bysubplot
bysubplot=ggplot(response_time,aes(x=TimeBin,y=Prop))+geom_line(aes(color=AOI))+facet_wrap(~ps,ncol=12)
bysubplot
bysubplot=ggplot(response_time,aes(x=TimeBin,y=Prop))+geom_line(aes(color=AOI))+facet_wrap(~ps,ncol=11)
bysubplot
drop1(model_switches,~.,test="Chi")
View(DATA)
sdx
data_summary <- describe_data(response_time,describe_column='SOCIAL', group_columns=c('ParticipantName'))
data_summary <- describe_data(response_time,describe_column='SOCIAL', group_columns=c('ps'))
data_summary <- describe_data(response_time,describe_column='AOI', group_columns=c('ps'))
head(response_time)
response_window <- subset_by_window(data,window_start_time = 0,
window_end_time = 5000, rezero = FALSE)
data_summary <- describe_data(response_time,describe_column='AOI', group_columns=('ps'))
data_summary <- describe_data(response_window,describe_column='AOI', group_columns=('ps'))
plot(data_summmary)
plot(data_summary)
data_summary <- describe_data(response_window,describe_column='SOCIAL', group_columns=('ps'))
plot(data_summary)
head(data)
data_summary <- describe_data(response_window,describe_column='isinL', group_columns=('X3'))
plot(data_summary)
data_summary <- describe_data(response_window,describe_column='isinL', group_columns=c('X3','ps'))
plot(data_summary)
x=plot(data_summary)
x+xlab("Social Image Location")
x+xlab("Social Image Location")+ggtitle("Proportion viewing left image")
data_summaryL
data_summaryL <- describe_data(response_window,describe_column='isinL', group_columns=c('X3','ps'))
xL=plot(data_summaryL)
xL+xlab("Social Image Location")+ggtitle("Proportion viewing left image")
data_summaryL
data_summaryR <- describe_data(response_window,describe_column='isinR', group_columns=c('X3','ps'))
xR=plot(data_summaryR)
xR+xlab("Social Image Location")+ggtitle("Proportion viewing right image")
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
data_summaryL <- describe_data(response_window,describe_column='isinL', group_columns=c('X3','ps'))
xL=plot(data_summaryL)
XL2xL+xlab("Social Image Location")+ggtitle("Proportion viewing left image")
data_summaryR <- describe_data(response_window,describe_column='isinR', group_columns=c('X3','ps'))
xR=plot(data_summaryR)
xR2=xR+xlab("Social Image Location")+ggtitle("Proportion viewing right image")
XL2=xL+xlab("Social Image Location")+ggtitle("Proportion viewing left image")
data_summaryR <- describe_data(response_window,describe_column='isinR', group_columns=c('X3','ps'))
xR=plot(data_summaryR)
xR2=xR+xlab("Social Image Location")+ggtitle("Proportion viewing right image")
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
require(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(XL2,XR2)
multiplot(XL2,xR2)
multiplot(XL2,xR2,cols=2)
tb_analysis <- analyze_time_bins(data = response_time, test = "t.test",predictor_column = "AOI", alpha = .05,p_adjust_method = "bonferroni",treatment_level = NONSOCIAL)
summary(tb_analysis)
save.image("~/Documents/NH_EYETRACK_NOODLE/Workspace.RData")
